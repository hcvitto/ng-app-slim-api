{
  "_args": [
    [
      {
        "raw": "@angular-devkit/build-optimizer@0.0.13",
        "scope": "@angular-devkit",
        "escapedName": "@angular-devkit%2fbuild-optimizer",
        "name": "@angular-devkit/build-optimizer",
        "rawSpec": "0.0.13",
        "spec": "0.0.13",
        "type": "version"
      },
      "F:\\progetti\\hypercv\\hypercvfe\\node_modules\\@angular\\cli"
    ]
  ],
  "_from": "@angular-devkit/build-optimizer@0.0.13",
  "_id": "@angular-devkit/build-optimizer@0.0.13",
  "_inCache": true,
  "_location": "/@angular-devkit/build-optimizer",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/build-optimizer-0.0.13.tgz_1502319911937_0.4712073162663728"
  },
  "_npmUser": {
    "name": "angular",
    "email": "angular-core+npm@google.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@angular-devkit/build-optimizer@0.0.13",
    "scope": "@angular-devkit",
    "escapedName": "@angular-devkit%2fbuild-optimizer",
    "name": "@angular-devkit/build-optimizer",
    "rawSpec": "0.0.13",
    "spec": "0.0.13",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular/cli"
  ],
  "_resolved": "https://registry.npmjs.org/@angular-devkit/build-optimizer/-/build-optimizer-0.0.13.tgz",
  "_shasum": "cf397af76abe899aa909d4a735106694ca1f08cf",
  "_shrinkwrap": null,
  "_spec": "@angular-devkit/build-optimizer@0.0.13",
  "_where": "F:\\progetti\\hypercv\\hypercvfe\\node_modules\\@angular\\cli",
  "author": {
    "name": "Angular Authors"
  },
  "bin": {
    "build-optimizer": "./src/build-optimizer/cli.js",
    "purify": "./src/purify/cli.js"
  },
  "bugs": {
    "url": "https://github.com/angular/devkit/issues"
  },
  "dependencies": {
    "loader-utils": "^1.1.0",
    "source-map": "^0.5.6",
    "typescript": "^2.3.3"
  },
  "description": "Angular Build Optimizer",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-yEMkYU4YU8XlA5OauPhg22ZEWJ4X2VhiFKUwfeo4UWJ7lz4XWiuBJocrT5NHWqI1S0rOLpSixLXG9byvFMbavA==",
    "shasum": "cf397af76abe899aa909d4a735106694ca1f08cf",
    "tarball": "https://registry.npmjs.org/@angular-devkit/build-optimizer/-/build-optimizer-0.0.13.tgz"
  },
  "engines": {
    "node": ">= 6.9.0",
    "npm": ">= 3.0.0"
  },
  "homepage": "https://github.com/angular/devkit",
  "keywords": [
    "angular",
    "devkit",
    "sdk",
    "Angular DevKit"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "angular",
      "email": "angular-core+npm@google.com"
    },
    {
      "name": "angular-devkit",
      "email": "hansl@google.com"
    }
  ],
  "name": "@angular-devkit/build-optimizer",
  "optionalDependencies": {},
  "readme": "# Angular Build Optimizer\n\nAngular Build Optimizer contains Angular optimizations applicable to JavaScript code as a TypeScript transform pipeline.\n\n\n## Available optimizations\n\nTransformations applied depend on file content:\n\n- [Class fold](#class-fold), [Scrub file](#scrub-file) and [Prefix functions](#prefix-functions): applied to Angular apps and libraries.\n- [Import tslib](#import-tslib): applied when TypeScript helpers are found.\n\nNon-transform optimizations are applied via the [Purify Plugin](#purify-plugin).\n\nSome of these optimizations add `/*@__PURE__*/` comments.\nThese are used by [UglifyJS](https://github.com/mishoo/UglifyJS2) to identify pure functions that can potentially be dropped.\n\n\n### Class fold\n\nStatic properties are folded into ES5 classes:\n\n```typescript\n// input\nvar Clazz = (function () { function Clazz() { } return Clazz; }());\nClazz.prop = 1;\n\n// output\nvar Clazz = (function () { function Clazz() { } Clazz.prop = 1; return Clazz; }());\n```\n\n\n### Scrub file\n\nAngular decorators, property decorators and constructor parameters are removed, while leaving non-Angular ones intact.\n\n```typescript\n// input\nimport { Injectable, Input } from '@angular/core';\nimport { NotInjectable } from 'another-lib';\nvar Clazz = (function () { function Clazz() { } return Clazz; }());\nClazz.decorators = [{ type: Injectable }, { type: NotInjectable }];\nClazz.propDecorators = { 'ngIf': [{ type: Input }] };\nClazz.ctorParameters = function () { return [{type: Injector}]; };\n\n// output\nimport { Injectable, Input } from '@angular/core';\nimport { NotInjectable } from 'another-lib';\nvar Clazz = (function () { function Clazz() { } return Clazz; }());\nClazz.decorators = [{ type: NotInjectable }];\n```\n\n\n### Prefix functions\n\nAdds `/*@__PURE__*/` comments to top level downleveled class declarations and instantiation. \nWebpack library imports are also marked as `/*@__PURE__*/` when used with [Purify Plugin](#purify-plugin).\n\n```typescript\n// input\nvar Clazz = (function () { function Clazz() { } return Clazz; }());\nvar newClazz = new Clazz();\nvar newClazzTwo = Clazz();\n\n// output\nvar Clazz = /*@__PURE__*/ (function () { function Clazz() { } return Clazz; }());\nvar newClazz = /*@__PURE__*/ new Clazz();\nvar newClazzTwo = /*@__PURE__*/ Clazz();\n```\n\n\n### Import tslib\n\nTypeScript helpers (`__extends/__decorate/__metadata/__param`) are replaced with `tslib` imports whenever found.\n\n```typescript\n// input\nvar __extends = (this && this.__extends) || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n// output\nimport { __extends } from \"tslib\";\n```\n\n\n### Purify Plugin\n\nPerforms regex based replacements on all files that add `/*@__PURE__*/` comments to downleveled classes,  TypeScript \nenums and webpack imports (used with [Prefix functions](#prefix-functions))\n\n\n## Library Usage\n\n```typescript\nimport { buildOptimizer } from '@angular-devkit/build-optimizer';\n\nconst transpiledContent = buildOptimizer({ content: input }).content;\n```\n\nAvailable options:\n```typescript\nexport interface BuildOptimizerOptions {\n  content?: string;\n  inputFilePath?: string;\n  outputFilePath?: string;\n  emitSourceMap?: boolean;\n  strict?: boolean;\n}\n```\n\n\n## Webpack loader and plugin usage:\n\n```typescript\nconst PurifyPlugin = require('@angular-devkit/build-optimizer').PurifyPlugin;\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        loader: '@angular-devkit/build-optimizer/webpack-loader'\n        options: {\n          sourceMap: false\n        }\n      }\n    ]\n  },\n  plugins: [\n    new PurifyPlugin()\n  ]\n}\n```\n\n\n## CLI usage\n\n```bash\nbuild-optimizer input.js\nbuild-optimizer input.js output.js\npurify input.js\npurify input.js output.js\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/devkit.git"
  },
  "typings": "src/index.d.ts",
  "version": "0.0.13"
}
